// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package docker

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadMydockertc returns the embedded CollectionSpec for mydockertc.
func loadMydockertc() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_MydockertcBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load mydockertc: %w", err)
	}

	return spec, err
}

// loadMydockertcObjects loads mydockertc and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*mydockertcObjects
//	*mydockertcPrograms
//	*mydockertcMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadMydockertcObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadMydockertc()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// mydockertcSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type mydockertcSpecs struct {
	mydockertcProgramSpecs
	mydockertcMapSpecs
}

// mydockertcSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type mydockertcProgramSpecs struct {
	Mytc *ebpf.ProgramSpec `ebpf:"mytc"`
}

// mydockertcMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type mydockertcMapSpecs struct {
	TcIpMap *ebpf.MapSpec `ebpf:"tc_ip_map"`
}

// mydockertcObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadMydockertcObjects or ebpf.CollectionSpec.LoadAndAssign.
type mydockertcObjects struct {
	mydockertcPrograms
	mydockertcMaps
}

func (o *mydockertcObjects) Close() error {
	return _MydockertcClose(
		&o.mydockertcPrograms,
		&o.mydockertcMaps,
	)
}

// mydockertcMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadMydockertcObjects or ebpf.CollectionSpec.LoadAndAssign.
type mydockertcMaps struct {
	TcIpMap *ebpf.Map `ebpf:"tc_ip_map"`
}

func (m *mydockertcMaps) Close() error {
	return _MydockertcClose(
		m.TcIpMap,
	)
}

// mydockertcPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadMydockertcObjects or ebpf.CollectionSpec.LoadAndAssign.
type mydockertcPrograms struct {
	Mytc *ebpf.Program `ebpf:"mytc"`
}

func (p *mydockertcPrograms) Close() error {
	return _MydockertcClose(
		p.Mytc,
	)
}

func _MydockertcClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed mydockertc_x86_bpfel.o
var _MydockertcBytes []byte
